---
editor_options: 
  chunk_output_type: console
---

# Grunderna i R {.unnumbered}

R är ett så kallat open-source programmeringsspråk. Open-source betyder att programmet är gratis att ladda ner och använda, samt att vem som helst har möjlighet att skapa egna, skräddarsydda metoder eller analyser som enkelt kan delas med omvärlden. R har använts av statistiker och analytiker i mer än 20 års tid och många bidrag har byggt upp ett starkt och flexibelt verktyg som kan anpassas för många ändamål.

## Introduktion
R kännetecknas av sina *paket* med *funktioner* som vi kan använda för att genomföra olika *operationer*. Vi kan se på funktionerna som olika verktyg ämnade att lösa specifika problem, till exempel om vi vill slå in en spik i en bräda kan vi använda en hammare, och paketen som olika verktygslådor fokuserade på att genomföra en viss form utav arbete. När vi installerar R för första gången får vi tillgång till en stor mängd olika paket, men vi har möjligheten att utöka dessa väldigt enkelt. Vem som helst skapa funktioner och paket för allmänheten och ibland finns det ett behov av att ladda ner nya paket (motsv. köpa in nya verktygslådor) för att genomföra en viss sorts analys. 

Det finns flertalet gränssnitt som hjälper till att programmera med R, men vi rekommenderar att använda RStudio. Detta visuella gränssnitt medför att vi inte behöver programmera med en kommandotolk. För att installera R och RStudio kan du följa instruktionerna [här](https://posit.co/download/rstudio-desktop/). Detta underlag är skapad med `r R.version.string`. 

:::{.callout-important}
När vi programmerar i R, sparas objekt som vi skapar i datorns arbetsminne (RAM-minne). Arbetsminnet kan vi säga motsvarar ett korttidsminne, vilket innebär att vi har ett mindre utrymme att arbeta med än datorns hårddisk och information finns endast där temporärt. När vi startar upp R börjar vi en `session` som avslutas när vi stänger ner programmet. Vi kan spara objekt för att använda de senare i samma session, men dessa rensas när vi stänger ner programmet. Om vi vill använda objekt mellan sessioner kan vi spara ner information till datorns hårddisk, eller dess långtidsminne, på några olika sätt.
:::

### Starta RStudio
När vi startar RStudio för första gången, delas programmet in i tre olika fönster. Det är starkt rekommenderat att alltid börja med att öppna eller skapa ett dokument där kod sparas (även kallad ett `R Script` eller *skript*) genom **File** -> **New file** -> **R Script** (eller kortkommandot *Ctrl* el. *Command* + *Shift* + *N*). När detta skript öppnas delas RStudio in i fyra olika fönster. Ett skript har ändelsen `.R` men är i grunden en textfil och kan öppnas i alla enkla texthanterare, t.ex. Notepad, om vi vill redigera koden utanför R eller RStudio. 

#### Kort genomgång av RStudio
När ett skript skapats innehåller nu det övre vänstra fönstret denna fil. Här kan vi skriva kod som kan sparas ned och användas igen nästa gång vi öppnar programmet. Skriptet kan också skickas mellan datorer och är ett bra sätt att kunna dela med sig utav vad det är man jobbar med. Det rekommenderas starkt att alltid skriva kod i ett skript för att ha möjligheten att återanvända och redigera koden på ett lätt sätt.

Det nedre vänstra fönstret innehåller en *konsol*. Här visas all kod som vi kör och tillhörande utskrifter och vi kan också skriva kod direkt i konsollen. Det som skiljer användandet av konsollen med ett skript är att all kod som vi skriver i konsollen inte sparas någonstans och kommer försvinna nästa gång vi startar upp programmet. Det är också svårt att redigera kod, till exempel om man gjort något stavfel eller måste revidera kod som man skrivit för länge sedan.

I det nedre högra fönstret kan vi se olika flikar som visar filer från datorn, skapade visualiseringar, en översikt av de paket som vi har tillgängliga, samt få hjälp om olika funktioner i hjälpdokumentationen. Paket i R har inbyggda hjälpfiler som kan underlätta förståelsen av vad en funktion gör, hur den arbetar, vad den behöver för att köras med mera. Det rekommenderas att alltid börja med att titta i dokumentationen för en funktion om man är osäker på vad det är den gör.

Det övre högra fönstret innehåller en översikt av alla objekt som vi skapar under en session och som R lagrar i korttidsminnet. Objekten som vi ser i RStudios *Environment*-flik kan vi klicka på för att antingen få mer detaljer om objektet, exempelvis hur stort ett visst objekt är eller om den innehåller fler delobjekt.

Vi kommer återkomma till dessa olika fönster senare i underlaget. 

### R kod i underlaget
I detta underlag kommer kodexempel (ljus bakgrund) visas som du kan kopiera till din egna dator. En knapp finns överst i det högra hörnet som kopierar allt innehåll i kodblocket. Från exemplena visas också utskrifter (mörk bakgrund) från koden som vi i RStudio ser i konsollen.
```{r}
# Exempelkod som kan kopieras med en knapp i det övra högra hörnet.
```

```{r}
#| echo: false
cat("Utskrift från koder.")
```

## Grundläggande programmering i R {#sec-basics-R}
R är ett kraftfullt språk som kan genomföra väldigt komplexa och avancerade beräkningar. Innan vi kommer dit måste vi första börja med grunderna i R och en utav de vanligaste användningsområdena för R är att använda språket som en vanlig miniräknare. R kommer läsa varje rad kod som en enskild operation och vi kan `köra` kod på flera olika sätt. 

Vi kan antingen använda knappen uppe till höger av skriptet som heter Run eller använda kortkommandot *Ctrl* el. *Command* + *Enter* för att köra enstaka rader kod. R kan också köra flera rader kod samtidigt om vi markerar flera rader och klickar på Run eller använder kortkommandot.

### R som miniräknare
Till att börja med kan vi använda matematiska operatorer såsom `+`, `-`, `*`, och `/`.

```{r}
#| eval: true

## Addition
2 + 3

## Subtraktion
5 - 2

## Multiplikation
4 * 5

## Division
20 / 4

```

R kommer genomföra dessa operationer mellan siffrorna och skriva ut svaret i konsollen. De vanliga räknereglerna för matematiska operatorer gäller här vilket innebär att t.ex. kommer:
```{r}

## Räkneregler
1 + 2 * 3

```

generera ett annorlunda svar än:

```{r}

## Räkneregler forts.
(1 + 2) * 3

```

#### Kommentarer i koden
I ovanstående kodexempel ser vi också något speciellt. Om du kopierar all text från ett utav blocken och kör den på egen hand, kommer R endast skriva ut resultat från raden som inte innehåller `#`. En rad som börjar med `#` kommer R istället läsa som en kommentar. Detta medför att vi kan kommentera kod som vi skriver vilket har många fördelar. 

Dels kan vi i anslutning till specifika bitar kod själva beskriva vad koden gör och vad för resultat som vi förväntar oss att få. Det är väldigt lätt att man i ett stort skript tappar bort sig själv, eller när man öppnar skriptet vid nästa session har glömt bort vad det är koden gör. Med kommentarer kan vi lättare komma ihåg vad de olika delarna gör, men framförallt om vi skickar koden till någon annan kan vi skicka med tillhörande instruktioner så att det blir lättare att följa vad det är som händer. **Försök att få in en rutin att kommentera kod som du skriver redan från början!**

### Objekt och dess typer {#sec-objectTypes}
I tidigare exempel kommer svaret på beräkningarna endast skrivas ut i konsollen, men om vi hade varit intresserade av att spara ner informationen och använda den senare behöver vi specifikt säga till R att göra det. 

Vi kan spara resultat av en operation till ett *objekt* med hjälp av `<-`. När vi vill ge ett objekt ett värde är det praxis att använda `<-` och vi kan skriva detta som en kombination av symbolerna, `<` och `-`. Vi kan läsa det som ''*ett värde ges till objektet i pilens riktning*''.

Objekt kan heta nästintill vadsomhelst men vi måste förhålla oss till ett par begränsningar:

- ett objektnamn kan **inte** börja med en siffa, ex. `9tal <- 9` är inte tillåtet.
- ett objektnamn kan **inte** innehålla mellanslag, ex. `ett tal <- 2` är inte tillåtet. ^[Det finns ett sätt att tillåta detta som vi kommer till i kapitel @sec-tidyverse.]

Istället kan vi använda siffror och andra symboler *inuti* namnet, ex. `tal9`. Istället för mellanslag för att separera ord kan vi använda ett system kallad *camelCase*. Detta sätt att namnge objekt medför att vi tar bort alla mellanslag, slår ihop orden, och använder stor bokstav för att urskilja enskilda delar, ex. `ettTal`. 

Vi kan spara några matematiska operationer för att använda de senare.

```{r}
## Summan av 2 + 3 tilldelas till ett objekt, döpt till a
a <- 2 + 3

## Vi kan använda en högerriktad pil, men detta är inte praxis
2 + 3 -> a
```

Vi kan nu använda `a` i senare delar av vår kod och R kommer veta att objektet innehåller summan av `2 + 3`.

```{r}

## a (5) + 3
a + 3

## a (5) / 5
a / 5

```

#### Typer
R kan utföra olika operationer beroende på vilken typ av objekt som vi har sparat. En fördel jämfört med andra programmeringsspråk är att vi, i majoriteten av fallen, inte behöver säga till R vilken typ ett objekt är, R kan läsa av kontexten relativt bra. Till exempel kommer objektet `a` vara numeriskt (mer specifikt typen *numeric*) och vi kan kontrollera detta genom funktionen `class()`.
```{r}
class(a)
```

Utöver numeriska typer finns även:

- textsträng (*character*): ex. `"hej"`, `"Anna"`,
- logisk (*logical*): ex. `TRUE` eller `FALSE`,

samt två specialfall av siffror:

- heltal (*integer*), ett specialfall av numeriskt när det bara förekommer heltal: `2L` där `L` anger till R att objektet ska vara av typen `integer`,
- komplex (*complex*) innehållande komplexa tal

Vanligtvis räcker det med att använda `numeric`, `character` och `logical`-typer. I praktiken använder sig R utav ytterligare ett specialfall för textsträngar, *Factor*. Ett `Factor`-objekt är en blandning av en siffra och text där R lagrar en siffra men har ett lexikon där varje siffra egentligen representerar en textsträng. 

```{r}
## Siffror anges bara som de är
valfrittNummer <- 3

## För att man ska ange text måste de omges av " " (citattecken) för att R ska läsa de som text
valfriText <- "Hello world!"

## Om något är sant 
test <- TRUE

```

Med hjälp av dessa objekt kan vi använda dess värden senare. 

```{r}
# a är summan av 2 + 3, och valfrittNummer har värdet 3
a + valfrittNummer
```

:::{.callout-important}
Lägg märke till att om vi genomför någon matematisk beräkning på ett sparat objekt, till exempel `a + 3` så kommer objektet `a` fortfarande ha samma värde som när vi skapade det. Vi ser enbart resultatet av beräkningen i konsollen och måste tilldela värdet på nytt om vi vill spara det. R uppdaterar inte värdet på ett objekt såvida vi inte ''skriver över'' det.
:::

### Felsökning
Vad händer om vi försöker genomföra en matematisk operation på två objekt som inte båda är numeriska?

```{r}
#| error: TRUE

## Ett numeriskt objekt - text
valfrittNummer - valfriText

```

Vi får nu inte ut något värde i konsollen utan får istället ett *felmeddelande*. Felmeddelanden och felsökning är en stor del av programmering och kommer vara mycket frustrerande till en början. R ger oss dock (ofta) en indikation på vad som har gått fel och efter ett tag kommer du börja känna igen vanligt förekommande fel och hur man ska lösa dem. 

I detta fall säger R att vi har en ''*non-numeric argument to binary operator*'' vilket kanske inte är jättetydligt vad det egentligen betyder, men den första delen av meddelandet är viktigt. Vi har ett icke-numeriskt objekt i en operation som kräver numeriska värden. Detta vet vi ju eftersom `valfriText` är en textsträng och vi kan då lätt lösa felet genom att ange ett annat numeriskt objekt istället.

### Datastrukturer
I de tidigare exemplen har ett objekt endast haft ett värde, men vi kan tillåta att ett objekt har en samling med värden istället. Detta kallar vi för *datastrukturer* då vi på olika sätt strukturerar data. Vanligen kräver en datastruktur att värdena är av samma typ, men vissa strukturer tillåter en blandning av typer.

#### Vektorer
Låt oss säga att vi har en massa kläder som ligger kaotiskt utspritt i ett rum. För att strukturera dessa kan vi exempelvis ta alla sockar och lägga dem i en låda. Lådan innehåller därmed en grupp av liknande objekt, som i R motsvarar en *vektor*. 

En vektor måste innehålla värden av samma typ, siffror, text, eller logiska värden. För att skapa en vektor använder vi funktionen `c()`, där varje delobjekt kallas för *element*. Vi separarar elementen i funktionen med ett kommatecken.

```{r}
## En vektor med numeriska värden
A <- c(3, 5, 3, 7)

B <- c(1, 3, 2, 4)

## En vektor med textstränger
ord <- c("Apelsin", "Banan", "Citron")

## Skriver ut respektive vektor
A
B
ord
```

Vektor `A` och `B` har fyra element och vektor `ord` har tre element, alla av samma typ. Om vi vill titta på ett element kan vi *indexera* vektorn. Indexering innebär att vi säger till R att plocka ut angivna element ur objektets *dimensionser*. En vektor har bara en dimension vilket innebär att indexfunktionen `[]` endast behöver ett värde. 

:::{.callout-important}
R börjar räkna från 1 när det kommer till index. Detta skiljer sig från andra programmeringsspråk som oftast börjar på 0.
:::

```{r}
# Plockar ut det fjärde elementet ur vektorn A
A[4]

# Plockar ut det andra elementet ur vektorn ord
ord[2]
```

Vi kan också plocka ut flera element genom att i indexeringen ange en vektor med numeriska index.

```{r}

## Plockar ut det andra och fjärde elementet ur vektorn B
B[c(2, 4)]

```


#### Matriser
Låt oss anta att vi har två vektorer med lika många element. Vi kan slå ihop dessa till en *matris* genom funktionen `matrix()`. En matris måste, likt vektorer, innehålla värden av samma typ, vi kan alltså inte kombinera en numerisk vektor och en textvektor oavsett om de har lika många element.

```{r}
## En matris med värdena från vektor A och B där vi anger att vi har 2 kolumner
matris <- matrix(c(A,B), ncol = 2)

## Skriver ut matrisen
matris
```

Vi ser nu i marginalerna (raderna och kolumnerna) att R använder två dimensioner för att peka på ett element. Indexeringen behöver nu två värden `[radindex, kolumnindex]` för att plocka ut enskilda element. Ordningen av dessa värden spelar roll eftersom R först letar efter en specifik rad (före ,) och sedan en specifik kolumn (efter ,). Om inget värde anges som rad- eller kolumnindex förutsätter R att vi vill se alla index från den dimensionen. 

```{r}
## Plockar ut den andra kolumnen ur matris, vektor B
matris[,2]

## Plockar ut elementet från den andra raden och första kolumnen, värdet 5
matris[2,1]

## Plockar ut elementet från den första raden och andra kolumnen, värdet 1
matris[1,2]
```

#### Listor och data frames {#sec-data-frame}
Det är ibland begränsande att kräva samma typ av objekt i en vektor eller matris, men som tur är finns det en datastruktur som faktiskt tillåter oss att kombinera objekt av olika typ. Denna struktur kallas för en *lista* och vi kan se en lista lite som en byrålåda. I en byrålåda kan vi samla ihop lådor av olika storlek och form och detsamma kan vi göra i en lista. Vi kan kombinera vektorer av olika typer med matriser eller enskilda värden i en och samma lista, vi kan till och med lägga in en lista inuti en annan lista. 

Följande exempel är en lista med fyra olika objekt. 

```{r}

lista <- list(A, B, ord, matris)

lista

```

För att plocka ut ett element från listan behöver vi använda ytterligare en form av indexering. Vi behöver först ta oss in i en utav lådorna för att indexera den som vanligt, och det gör vi genom `[[element]]`.

```{r}

## Plockar ut det fjärde elementet ur vektorn A, listans första element
lista[[1]][4]


## Plockar ut elementet från den andra raden och första kolumnen i listans fjärde element
lista[[4]][2,1]

```

Flexibiliteten i en lista gör det däremot väldigt svårt att arbeta med den, mer specifikt att en lista kan innehålla objekt av olika storlekar. En mer strukturerad datastruktur som tillåter olika typer av objekt är en *data frame*. Likt en matris innehåller en data frame vektorer av samma längd och likt en lista tillåter en data frame att vektorerna är av olika typ, vi kombinerar alltså strukturen från en matris med flexibiliteten från en lista. Ytterligare en fördel med en data frame är att kolumnerna (vektorerna) kan ha namn för att lättare urskilja vad objektet innehåller. 

<!-- BILDER PÅ EN STRUKTURERAD BYRÅLÅDA (DATA FRAME) OCH EN FLEXIBEL BYRÅLÅDA (LIST) -->

```{r}
## Skapar en data frame med hjälp av funktionen data.frame() och döper de två kolumnerna till Var1 och Var2
data.frame(Var1 = A, Var2 = B)
```

När vi samlar in data inom statistik brukar vi ställa upp informationen med samma struktur som en data frame, där varje rad är en observerad enhet och varje kolumn är en variabel som vi gör mätningar på. Varje enskilda cell blir då enhetens uppmätta värde på den angivna variabeln, till exempel halten kväveoxid i Vänern. Detta kallar vi ofta för *rådata*-format.

```{r}
## Skapar data
student <- 
  data.frame(
    namn = c("Anna", "Oscar", "Jakob", "Noor"),
    längd = c(158, 164, 180, 174),
    utbildning = c("Biologi", "Biologi", "Matematik", "Statistik")
  )

## Skriver ut data
student
```

Vi kan i objektet `student` till exempel läsa att den första studenten Anna är 158 cm lång och studerar Biologi. Om vi är intresserade av en specifik variabel ur denna data frame kan vi återigen indexera med hjälp av `[]` men det vanligaste är att istället använda `$`.

```{r}
## Indexerar variabeln "utbildning" ur data frame "student"
student$utbildning

## Gör samma indexering med hjälp av [], där "utbildning" är den tredje kolumnen
student[,3]

## Gör återigen samma men använder namnet på variabeln
student[, "utbildning"]

```

För att plocka ut enskilda rader (observationer) eller celler kan vi indexera med `[radindex, kolumnindex]` likt en matris.

## Sammanfattning
Nu har vi fått en genomgång av grunderna i R, hur man kodar enkla matematiska operationer, vilka typer av objekt som R kan arbeta med, och hur vi sparar information till arbetsminnet på olika sätt som kan användas senare i samma session. Vi kommer i nästkommande kapitel gå igenom olika hjälpmedel som R och RStudio erbjuder så att vi inte alltid behöver koda allting från grunden. 

## Övningsuppgifter
Med hjälp av R på din egna dator försök att lösa följande uppgifter. Efter varje uppgift får du en utskrift som visar hur resultatet ska se ut från din kod.

a) Spara en numerisk vektor med alla värden från 1 till och med 6 i ökande ordning.

```{r} 
#| echo: false

a <- 1:6

a

```

b) Spara en textvektor med sex element där den första, tredje och fjärde elementet är Hund och resterande är Katt.

```{r} 
#| echo: false

text <- c("Hund", "Katt", "Hund", "Hund", "Katt", "Katt")

text

```

c) Skapa en data frame med två kolumner. Den första kolumnen ska heta "ID" och innehålla vektorn från a) och den andra kolumnen ska heta "Art" och innehålla vektorn från b).

```{r} 
#| echo: false

data <- 
  data.frame(
    ID = a,
    Art = text
  )

data  

```

d) Plocka ut den fjärde observationen.

```{r} 
#| echo: false

data[4,]

```


