---
editor_options: 
  chunk_output_type: console
  
---
# tidyverse {#sec-tidyverse .unnumbered} 

En stor del utav statistisk analys omfattar bearbetning av datamaterial som samlats in till ett format som lämpar sig för olika statistiska analysmetoder. Ett datamaterial som man själv samlar in (*primärdata*) eller datamaterial som hämtas från någon annan källa (*sekundärdata*) är inte alltid strukturerat på det sätt som vi, eller metoderna, önskar. `tidyverse` är en samling paket i R som har en gemensam grund att programmera, både i dess syntax och grammatik. 

Inom statistik önskas data ofta följa formatet: "en rad är en observation", "en kolumn är en variabel" och "en cell är ett värde", så att vi med lätthet kan hantera datamaterialet på ett flertal olika sätt. Detta kan vi kalla för *rådata* eller *tidy data* och @sec-example-data visar data på just detta format. Varje rad är en uppmätt pingvin och varje kolumn är mätvärden för varje variabel. Exempel på en struktur som inte följer denna praxis är frekvenstabeller där varje rad visar flera observationer som har samma variabelvärde. 

Vi kan installera de paketen som ingår i `tidyverse` genom att installera paketet med samma namn och ladda in det i arbetsminnet med `require()` eller `library()`.

```{r}
#| eval: false
#| code-fold: false

install.packages("tidyverse")

require(tidyverse)

```

I detta kapitel kommer vi gå igenom de olika paketen som behandlar datastrukturer och olika variablertyper medan senare kapitel kommer fortsätta med paket för visualisering (`ggplot2`) och mer avancerad kodning (`purrr`).

## Läsa in filer med `readr` {#sec-readr}
R innehåller många inbyggda funktioner (se @sec-readData) för hur man kan läsa in filer av olika format från hårddisken. Vi har tidigare tittat på `read.csv2()` som är en grundfunktion i R, men `readr` har liknande funktioner utöver flera andra specialfall som utgår från vissa standardformat för filer. 

:::{.callout-tip}
Det är starkt rekommenderat att läsa in text-filer i R, inte Excelfiler då Excel kan innehålla specialformat som R inte kan läsa in korrekt. Vi kan från Excel spara om en .xlsx fil till en .txt-, .tsv- eller .csv-fil.
:::

```{r}
#| eval: false
#| code-fold: false

# Läser in en textfil där kolumner separeras med en (eller flera) mellanslag (.txt)
read_table(file = "sökväg")

# Läser in en textfil där kolumner separeras med tab (.tsv)
read_tsv(file = "sökväg")

# Läser in en textfil där kolumner separeras med , (read_csv) eller ; (read_csv2)
read_csv(file = "sökväg")
read_csv2(file = "sökväg")

```

Resultatet av dessa funktioner blir en formatterad *tibble*, vilket är `tidyverse` version av en `data frame`.

:::{.callout-important}
Se till att datamaterialet som laddats in ser ut som vi förväntar att det ska göra, exempelvis är decimaler korrekt angivna, har vi lika många variabler i R som i originalfilen och liknande.
:::

## Dataobjektet `tibble` {#sec-tibble}
I @sec-data-frame presenterades datastrukturen `data frame` som ett sätt för oss att i R spara information i ett strukturerat rådataformat. En `tibble` är en utbyggnad av denna datastruktur som rensat bort egenskaper av objektet som inte längre används och lägger till egenskaper som vi ofta vill använda när vi bearbetar data. Likt en `data frame`, innehåller en `tibble` en samling lika långa kolumner och dessa kolumner kan vara av olika objekttyper. Till exempel kan vi blanda listor och vektorer så länge de innehåller lika många element. 

:::{.callout-important}
En `tibble` konverterar inte textvektorer till faktorer per automatik. Det vill säga om ett datamaterial som läses in via `read_csv2()` innehåller text, kommer denna variabel vara ett `character`-objekt, inte ett `Factor`-objekt.
::: 

Vi kan skapa en `tibble` från grunden genom att ange vilka objekt vi vill inkludera och vad de ska heta:

```{r}
#| code-fold: false

a <- c(1, 2, 3)
b <- c(4, 5, 6)
c <- c("a", "b", "c")

# Skapar en tibble utifrån angivna vektorer
data <- 
  tibble(
    Var1 = a,
    Var2 = b,
    Var3 = c
  )

# Skriver ut tibble till konsollen
print(data)

```

En direkt utskrift av en `tibble` innehåller både dimensionerna av hela objektet och vad för typ respektive variabel är. 

Om vi har en matris eller något annat objekt som ser ut som en tibble men inte är det, kan vi konvertera den till en tibble med hjälp av `as_tibble()`.

```{r}

# Tar objektet a (en vektor) och gör om den till en tibble med en kolumn
vectorToTibble <- 
  a %>% 
    as_tibble()

print(vectorToTibble)

```

## Omformatera data med `tidyr` {#sec-tidyr}
En utav de tyngsta delarna av statistisk analys är ofta att bearbeta data till det format som önskas. Paketet `tidyr` innehåller ett flertal funktioner som kan bearbeta data på många olika sätt 


Om data inte är på det format som vi önskar eller om någon statistisk metod behöver ett material som har ett annat format än tidy-data. Detta paket kommer vi inte titta på just nu i detalj men följande Cheat Sheets innehåller exempel på olika bearbetningar som vi kan vara intresserade av att genomföra med data.

```{r}
#| echo: false

htmltools::HTML("<a href='https://github.com/rstudio/cheatsheets/blob/master/tidyr.pdf' class='external-link' target='blank'><img src='https://raw.githubusercontent.com/rstudio/cheatsheets/master/pngs/thumbnails/tidyr-thumbs.png'></a>")

```

## Koppla samman funktioner med pipes
Inom programmering, speciellt databearbetning, är det vanligt att vi vill skapa ett objekt, göra någon bearbetning på den, använda den i en statistisk analys och så vidare. Att nästla funktioner inuti varandra blir lätt väldigt krångligt att läsa och förstå vad som faktiskt händer eller vilka argument som hör till vilken funktion. Alternativet är att spara om objektet flera gånger men då skapas många onödiga objekt som vi måste hålla koll på och som egentligen bara tar upp plats i arbetsminnet.

```{r}
#| eval: false
#| code-fold: false

# Fyra nästlade funktioner som ska appliceras på ett objekt med olika argument
funktion4(funktion3(funktion2(funktion1(objekt), argument2 = X)), argument4 = Y)

# Fyra funktioner som sparas vid varje steg
A <- funktion1(objekt)

B <- funktion2(A, argument2 = X)

C <- funktion3(B)

D <- funktion4(C, argument4 = Y)

```

Inom `tidyverse` används istället en annan process som kallas för programmeringspipes som kan skapa sekvenser av funktioner som är sammanlänkade i varandra.^[Även basversionen av R/RStudio har anammat denna process och det finns nu två varianter av en pipe. Detta underlag kommer använda `tidyverse` varianten.] Från paketet `dplyr` används operatorn `%>%` som kan skapas med kortkommandot Ctrl + Shift + M (CMD + Shift + M). Denna operator tar resultatet från funktionen innan `%>%` och skickar vidare det som det första argumentet i funktionen efter `%>%`.

```{r}
#| eval: false
#| code-fold: false

# Samma operation av fyra funktioner men med piping
objekt %>% 
  funktion1() %>% 
  funktion2(argument2 = X) %>% 
  funktion3() %>% 
  funktion4(argument4 = Y)

```

Funktioner som inte behöver fler än ett argument skrivs bara ut som funktionen med tomma parenteser då resultatet används automatiskt som värdet på det argumentet. Funktioner som har ytterligare argument behöver bara ange de argument som inte använder sig av det tidigare resultatet. 

:::{.callout-important}
Det kan finnas funktioner som vill använda det tidigare resultatet i ett argument som inte är det första i funktionen. Som tur är kan vi lösa detta genom att använda `.` som symbolen för det tidigare resultatet och ange det vid argumentet som är aktuellt.

```{r}
#| eval: false
#| code-fold: false

# Objektet (.) läggs här in som värde för det andra argumentet i funktionen
objekt %>% 
  funktion5(argument1 = X, argument2 = .)

```
:::

## Databearbetning med `dplyr`
Med hjälp av de tidigare kapitlen och det "nya" sättet att skriva sekvenser av funktioner med pipes kan vi nu börja titta närmare på databearbetning av objekt till en `tibble`. Det är vanligt att vi i databearbetning behöver göra flera steg för att skapa det objekt vi sen vill analysera och då kommer `%>%` mycket väl till pass. 

`dplyr` innehåller ett flertal olika "verb" som på ett sätt eller annat bearbetar data. Det första argumentet i alla dessa funktioner är ett dataobjekt men om vi använder pipes kommer det ske per automatik och vi behöver endast fokusera på de andra argumentet som beskriver hur "verbet" används.

### Byta namn på variabler med `rename()`
Data som läses in till R kan ibland ha konstiga och långa namn som vid programmering kan bli svåra att hantera. Ett sätt att underlätta detta problem är att döpa om variablerna till ett enkelt ord som vi sedan kan använda i efterföljande steg. 

Vi kan döpa om variabler med hjälp av `rename()` där vi anger det nya namnet givet det gamla namnet på variabeln eller variabelns kolumnindex.

```{r}
#| code-fold: false

# Döper om variabler till svenska namn utifrån det gamla namnet
penguins %>% 
  rename(
    art = species,
    näbblängd = bill_length_mm
  )

# Döper om variabler till svenska namn utifrån dess kolumnindex
penguins %>% 
  rename(
    art = 1,
    näbblängd = 3
  )

```


### Plocka ut rader med `filter()`
Om vi är intresserade av att plocka ut vissa rader ur ett objekt, till exempel om vi vill rensa bort saknade värden, kan vi använda `filter()` med någon logisk operator som säger vilka rader vi vill ha kvar.

```{r}
#| include: false

detach("package:dplyr")
require(dplyr)

```

```{r}
#| code-fold: false
# Filtrerar bort observationer som saknar information ur variabeln "sex"
penguinsNonMissing <- 
  penguins %>% 
    filter(!is.na(sex))

print(penguinsNonMissing)

```

Vi kan också plocka ut rader som uppfyller ett visst kriterie, till exempel plocka ut alla Adelie pingviner.

```{r}
#| code-fold: false

penguins %>% 
  filter(species == "Adelie")

```

### Plocka ut kolumner med `select()`
Anta att vi bara är intresserade av vissa kolumner från ett stort datamaterial, till exempel art och fenlängd av pingvinerna kan vi plocka ut de med hjälp av `select()`. Vi kan antingen använda variablernas faktiska namn eller variablernas kolumnindex för att specificera vilka variabler som ska plockas ut.

```{r}
#| code-fold: false

# Select med variabelnamn
penguins %>% 
  select(species, flipper_length_mm)

# Select med kolumnindex
penguins %>% 
  select(1, 5)
  
```

Det rekommenderas att använda variabelnamnen för att koden ska vara tydlig att läsa av och vi vet vilka variabler som faktiskt plockas ut och ev. skickas vidare till efterföljande funktioner.

Om vi har flera variabler som följer efter varandra behöver vi inte skriva upp varje enskilda variabelnamn som argument utan kan använda `Var1:Var5` för att säga åt funktionen att plocka ut alla variabler från och med `Var1` till och med `Var5`.

```{r}
#| code-fold: false

penguins %>% 
  select(species, bill_length_mm:body_mass_g)
```

### Byta plats på variabler med `relocate()`
Ibland kan vi vilja byta ordning på variablerna i datamaterialet utan att välja dem. Med `select()` får vi en möjlighet att välja vilken ordning som variablerna plockas ut, den ordning som vi anger dem i funktionen, men om vi bara vill flytta på variabler utan att plocka ut vissa kan `relocate()` användas istället.

Funktionen använder sig av tre argument, vilka variabler som ska flyttas och var de ska placeras. Som standard placeras de i början av datamaterialet.

```{r}
#| code-fold: false

# Placerar fenlängd som första kolumnen
penguins %>% 
  relocate(flipper_length_mm)

# Placerar art efter näbbreddens variabel
penguins %>% 
  relocate(species, .after = bill_depth_mm)

```

### Sortera data med `arrange()`

### Skapa nya variabler med `mutate()`

### Gruppera beräkningar med `group_by()`

### Sammanfatta data med `summarize()`

<!-- ## Hantering av text med `stringr` och `forcats` -->



